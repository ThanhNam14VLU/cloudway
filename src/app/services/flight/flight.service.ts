import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable, BehaviorSubject } from 'rxjs';
import { environment } from '../../../environments/environment';
import { FlightSearchRequest, FlightSearchResponse } from '../../models/flight.model';

@Injectable({
  providedIn: 'root'
})
export class FlightService {
  // Store search params ƒë·ªÉ share gi·ªØa c√°c components
  private searchParamsSubject = new BehaviorSubject<FlightSearchRequest | null>(null);
  public searchParams$ = this.searchParamsSubject.asObservable();

  constructor(private http: HttpClient) {}

  /**
   * T√¨m ki·∫øm chuy·∫øn bay
   */
  searchFlights(searchParams: FlightSearchRequest): Observable<FlightSearchResponse> {
    console.log('üîç Searching flights with params:', searchParams);
    
    // L∆∞u search params v√†o subject
    this.searchParamsSubject.next(searchParams);
    
    return this.http.post<FlightSearchResponse>(
      `${environment.apiUrl}/flights/search`,
      searchParams
    );
  }

  /**
   * L·∫•y search params hi·ªán t·∫°i
   */
  getCurrentSearchParams(): FlightSearchRequest | null {
    return this.searchParamsSubject.value;
  }

  /**
   * Clear search params
   */
  clearSearchParams(): void {
    this.searchParamsSubject.next(null);
  }

  /**
   * Validate search params tr∆∞·ªõc khi g·ª≠i
   */
  validateSearchParams(params: Partial<FlightSearchRequest>): string[] {
    const errors: string[] = [];

    if (!params.departure_airport_id) {
      errors.push('Vui l√≤ng ch·ªçn ƒëi·ªÉm ƒëi');
    }

    if (!params.destination_airport_id) {
      errors.push('Vui l√≤ng ch·ªçn ƒëi·ªÉm ƒë·∫øn');
    }

    if (params.departure_airport_id === params.destination_airport_id) {
      errors.push('ƒêi·ªÉm ƒëi v√† ƒëi·ªÉm ƒë·∫øn kh√¥ng ƒë∆∞·ª£c tr√πng nhau');
    }

    if (!params.departure_date) {
      errors.push('Vui l√≤ng ch·ªçn ng√†y ƒëi');
    }

    if (params.trip_type === 'roundtrip' && !params.return_date) {
      errors.push('Vui l√≤ng ch·ªçn ng√†y v·ªÅ cho chuy·∫øn kh·ª© h·ªìi');
    }

    // Validate dates
    if (params.departure_date) {
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      const departDate = new Date(params.departure_date);
      
      if (departDate < today) {
        errors.push('Ng√†y ƒëi kh√¥ng ƒë∆∞·ª£c l√† ng√†y trong qu√° kh·ª©');
      }
    }

    if (params.departure_date && params.return_date) {
      const departDate = new Date(params.departure_date);
      const returnDate = new Date(params.return_date);
      
      if (returnDate < departDate) {
        errors.push('Ng√†y v·ªÅ ph·∫£i sau ng√†y ƒëi');
      }
    }

    if (!params.adults || params.adults < 1) {
      errors.push('Ph·∫£i c√≥ √≠t nh·∫•t 1 ng∆∞·ªùi l·ªõn');
    }

    const totalPassengers = (params.adults || 0) + (params.children || 0) + (params.infants || 0);
    if (totalPassengers > 9) {
      errors.push('T·ªïng s·ªë h√†nh kh√°ch kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 9 ng∆∞·ªùi');
    }

    return errors;
  }

  /**
   * Format date to YYYY-MM-DD
   */
  formatDateForApi(date: Date | string): string {
    const d = typeof date === 'string' ? new Date(date) : date;
    const year = d.getFullYear();
    const month = String(d.getMonth() + 1).padStart(2, '0');
    const day = String(d.getDate()).padStart(2, '0');
    return `${year}-${month}-${day}`;
  }

  /**
   * Calculate total price for passengers
   */
  calculateTotalPrice(basePrice: number, adults: number, children: number, infants: number): number {
    const childDiscount = 0.75;  // Tr·∫ª em gi·∫£m 25%
    const infantDiscount = 0.1;  // Em b√© gi·∫£m 90%
    
    return (
      basePrice * adults +
      basePrice * childDiscount * children +
      basePrice * infantDiscount * infants
    );
  }

  /**
   * Format duration t·ª´ minutes sang gi·ªù ph√∫t
   */
  formatDuration(minutes: number): string {
    const hours = Math.floor(minutes / 60);
    const mins = minutes % 60;
    
    if (hours === 0) {
      return `${mins} ph√∫t`;
    }
    if (mins === 0) {
      return `${hours} gi·ªù`;
    }
    return `${hours} gi·ªù ${mins} ph√∫t`;
  }
}

