import { Component, OnInit } from '@angular/core';
import { Router } from '@angular/router';
import { supabase } from './supabase.client';
import { HttpClient } from '@angular/common/http';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { AuthService } from './services/auth/auth.service';
import { environment } from '../environments/environment';

@Component({
  imports:[MatProgressSpinnerModule],
  selector: 'app-auth-callback',
  template: `
    <div class="load">
      <p>ƒêang x√°c th·ª±c, vui l√≤ng ch·ªù...</p>
      <mat-spinner></mat-spinner>
    </div>
  `,
  styles:`p { font-size: 16px; text-align: center; margin-top: 20px; }
          .load { display: flex; flex-direction: column; align-items: center; justify-content: center; height: 100vh; }
          `
})
export class AuthCallbackComponent implements OnInit {
  constructor(private router: Router, private http: HttpClient, private authService: AuthService) {}

  async ngOnInit() {
    try {
      console.log('üü¢ Auth callback b·∫Øt ƒë·∫ßu');
      console.log('üìÑ URL callback:', window.location.href);

      // Ki·ªÉm tra xem c√≥ ph·∫£i l√† password recovery kh√¥ng
      const urlParams = new URLSearchParams(window.location.search);
      const type = urlParams.get('type');

      if (type === 'recovery') {
        console.log('üîÑ Password recovery callback');
        // ƒê·ª£i Supabase x·ª≠ l√Ω recovery callback
        await new Promise(resolve => setTimeout(resolve, 1000));

        const { data, error } = await supabase.auth.getSession();

        if (error || !data?.session) {
          console.error('‚ùå Recovery session error:', error);
          this.router.navigate(['/login']);
          return;
        }

        // ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn trang reset password
        this.router.navigate(['/reset-password']);
        return;
      }

      // ƒê·ª£i Supabase x·ª≠ l√Ω callback
      await new Promise(resolve => setTimeout(resolve, 1000));

      const { data, error } = await supabase.auth.getSession();

      if (error || !data?.session) {
        console.error('‚ùå Kh√¥ng c√≥ session:', error);
        this.router.navigate(['/login']);
        return;
      }

      const session = data.session;
      const user = session.user;
      const accessToken = session.access_token;

      console.log('‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng:', user);
      console.log('üîë Access token:', accessToken);

      // --- üî• G·ª≠i access token sang backend ƒë·ªÉ x√°c th·ª±c v√† t·∫°o user record ---
      try {
        await this.http.post(`${environment.apiUrl}/auth/supabase-login`, {
          token: accessToken,
        }).toPromise();
        console.log('‚úÖ Backend x√°c th·ª±c & l∆∞u user th√†nh c√¥ng');
      } catch (backendError) {
        console.warn('‚ö†Ô∏è Backend kh√¥ng kh·∫£ d·ª•ng, ti·∫øp t·ª•c v·ªõi frontend auth');
      }

      // Get profile and role for navigation
      const profile = await this.authService.getCurrentUserProfile();
      const role = await this.authService.getCurrentUserRole();
      console.log('üîé Resolved role after OAuth =', role);
      console.log('üîé Account status =', profile?.account_status);
      
      // Use actual profile data - check different possible field names
      const accountStatus = profile?.account_status || profile?.accountStatus || profile?.status || 'ACTIVE';
      console.log('üîé Using accountStatus:', accountStatus);
      
      // Navigate based on role and pass account status info
      if (role === 'ADMIN' || role === 'admin') {
        this.router.navigate(['/admin/admin-customers'], { 
          queryParams: { accountStatus: accountStatus } 
        });
      } else if (role === 'AIRLINE' || role === 'airline') {
        this.router.navigate(['/airline/airline-dashboard'], { 
          queryParams: { accountStatus: accountStatus } 
        });
      } else {
        this.router.navigate(['/home'], { 
          queryParams: { accountStatus: accountStatus } 
        });
      }
    } catch (e) {
      console.error('‚ùå Auth callback error:', e);
      this.router.navigate(['/login']);
    }
  }
}
