import { Component, Input, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { AirlineService } from '../../services/airline/airline.service';
import { AuthService } from '../../services/auth/auth.service';
import { BaseChartDirective } from 'ng2-charts';
import { ChartConfiguration, ChartData, ChartType, registerables } from 'chart.js';
import Chart from 'chart.js/auto';

@Component({
  selector: 'app-airline-dashboard',
  imports: [CommonModule, BaseChartDirective],
  standalone:true,
  templateUrl: './airline-dashboard.html',
  styleUrl: './airline-dashboard.scss'
})
export class AirlineDashboard implements OnInit {
  @Input() airlineId: string = '';
  // D·ªØ li·ªáu th·ªëng k√™; s·∫Ω fill t·ª´ service
  statistics: any = {
    total_flights: 0,
    total_passengers: 0,
    total_revenue: 0,
    cancelled_flights: 0,
    on_time_flights: 0
  };
  currentUserProfile: any = null;
  flightInstances: any[] = [];
  isLoading: boolean = true;

  // Chart configurations
  public revenueChartOptions: ChartConfiguration['options'] = {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      legend: {
        display: true,
        position: 'top',
      },
      title: {
        display: true,
        text: 'Doanh thu theo th√°ng'
      }
    },
    scales: {
      y: {
        beginAtZero: true,
        ticks: {
          callback: function(value) {
            return value.toLocaleString('vi-VN') + ' ‚Ç´';
          }
        }
      }
    }
  };

  public revenueChartData: ChartData<'line'> = {
    labels: [],
    datasets: [
      {
        data: [],
        label: 'Doanh thu',
        borderColor: '#3b82f6',
        backgroundColor: 'rgba(59, 130, 246, 0.1)',
        tension: 0.4,
        fill: true
      }
    ]
  };

  public flightStatusChartOptions: ChartConfiguration['options'] = {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      legend: {
        display: true,
        position: 'top',
      },
      title: {
        display: true,
        text: 'Tr·∫°ng th√°i chuy·∫øn bay'
      }
    }
  };

  public flightStatusChartData: ChartData<'doughnut'> = {
    labels: ['ƒê√∫ng gi·ªù', 'Ch·∫≠m gi·ªù', 'B·ªã h·ªßy'],
    datasets: [
      {
        data: [0, 0, 0],
        backgroundColor: ['#10b981', '#f59e0b', '#ef4444'],
        borderWidth: 2,
        borderColor: '#ffffff'
      }
    ]
  };

  public passengerChartOptions: ChartConfiguration['options'] = {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      legend: {
        display: true,
        position: 'top',
      },
      title: {
        display: true,
        text: 'H√†nh kh√°ch theo th√°ng'
      }
    },
    scales: {
      y: {
        beginAtZero: true,
        ticks: {
          callback: function(value) {
            return value.toLocaleString('vi-VN');
          }
        }
      }
    }
  };

  public passengerChartData: ChartData<'bar'> = {
    labels: [],
    datasets: [
      {
        data: [],
        label: 'H√†nh kh√°ch',
        backgroundColor: 'rgba(16, 185, 129, 0.8)',
        borderColor: '#10b981',
        borderWidth: 1
      }
    ]
  };

  public chartType: ChartType = 'line';

  get onTimeRate(): number {
    if (!this.statistics?.total_flights || this.statistics.total_flights === 0) return 0;
    return Math.round((this.statistics.on_time_flights / this.statistics.total_flights) * 1000) / 10;
  }

  constructor(private airlineService: AirlineService, private authService: AuthService) {
    // ƒêƒÉng k√Ω t·∫•t c·∫£ c√°c components c·ªßa Chart.js
    Chart.register(...registerables);
  }

  async ngOnInit(): Promise<void> {
    console.log('=== AIRLINE DASHBOARD INIT ===');
    
    // 1. L·∫•y th√¥ng tin user ƒë·∫ßy ƒë·ªß (bao g·ªìm airlines)
    this.currentUserProfile = await this.authService.getCurrentUserProfile();
    console.log('üîç Current user profile:', this.currentUserProfile);
    
    if (this.currentUserProfile?.airlines && this.currentUserProfile.airlines.length > 0) {
      const airlineInfo = this.currentUserProfile.airlines[0];
      console.log('‚úàÔ∏è Airline info:', airlineInfo);
      console.log('üè¢ Airline ID:', airlineInfo.id);
      console.log('üè¢ Airline name:', airlineInfo.name);
      console.log('üè¢ Airline IATA:', airlineInfo.iata_code);
      
      // 2. G·ªçi API th·ªëng k√™ v·ªõi airline ID
      this.airlineService.getAirlineStatistics(airlineInfo.id).subscribe({
        next: (res: any) => {
          console.log('üìä Statistics response:', res);
          console.log('üìä Raw response type:', typeof res);
          console.log('üìä Raw response keys:', Object.keys(res || {}));
          
          // API response ƒë√£ tr·∫£ v·ªÅ snake_case, s·ª≠ d·ª•ng tr·ª±c ti·∫øp
          const stats = res?.statistics || res; // Backend c√≥ th·ªÉ wrap trong 'statistics' object
          console.log('üìä Stats object:', stats);
          this.statistics = {
            period_date: new Date().toISOString().slice(0, 10), // Default to today
            total_flights: stats?.total_flights ?? 0,
            total_passengers: stats?.total_passengers ?? 0,
            total_revenue: stats?.total_revenue ?? 0,
            cancelled_flights: stats?.cancelled_flights ?? 0,
            on_time_flights: stats?.on_time_flights ?? 0
          };
          
          console.log('‚úÖ Statistics mapped:', this.statistics);
          console.log('üî¢ Total flights:', this.statistics.total_flights);
          console.log('üë• Total passengers:', this.statistics.total_passengers);
          console.log('üí∞ Total revenue:', this.statistics.total_revenue);
          
          // C·∫≠p nh·∫≠t bi·ªÉu ƒë·ªì v·ªõi d·ªØ li·ªáu statistics th·∫≠t
          this.updateChartsWithStatisticsData();
          
          // ƒê√°nh d·∫•u ƒë√£ t·∫£i xong statistics
          this.checkLoadingComplete();
        },
        error: (e) => {
          console.warn('‚ùå Kh√¥ng th·ªÉ t·∫£i th·ªëng k√™ h√£ng bay:', e);
          // V·∫´n t·∫Øt loading state ngay c·∫£ khi c√≥ l·ªói
          this.checkLoadingComplete();
        }
      });

      // 3. L·∫•y d·ªØ li·ªáu flight instances ƒë·ªÉ t·∫°o bi·ªÉu ƒë·ªì
      this.airlineService.getFlightInstances(airlineInfo.id).subscribe({
        next: (flights: any) => {
          console.log('‚úàÔ∏è Flight instances response:', flights);
          this.flightInstances = flights || [];
          
          // N·∫øu ch∆∞a c√≥ d·ªØ li·ªáu statistics, s·ª≠ d·ª•ng flight instances
          if (!this.statistics || this.statistics.total_flights === 0) {
            this.updateChartDataWithRealData();
          }
          // N·∫øu ƒë√£ c√≥ statistics, kh√¥ng c·∫ßn c·∫≠p nh·∫≠t l·∫°i bi·ªÉu ƒë·ªì
          
          // ƒê√°nh d·∫•u ƒë√£ t·∫£i xong flight instances
          this.checkLoadingComplete();
        },
        error: (e) => {
          console.warn('‚ùå Kh√¥ng th·ªÉ t·∫£i danh s√°ch chuy·∫øn bay:', e);
          // Fallback v·ªõi d·ªØ li·ªáu m·∫´u n·∫øu kh√¥ng l·∫•y ƒë∆∞·ª£c flight instances
          this.updateChartData();
          // V·∫´n t·∫Øt loading state
          this.checkLoadingComplete();
        }
      });
    } else {
      console.warn('‚ö†Ô∏è User kh√¥ng c√≥ th√¥ng tin h√£ng bay');
    }
  }

  /**
   * C·∫≠p nh·∫≠t bi·ªÉu ƒë·ªì v·ªõi d·ªØ li·ªáu th·∫≠t t·ª´ statistics
   * - S·ª≠ d·ª•ng d·ªØ li·ªáu t·ªïng quan ƒë·ªÉ t·∫°o bi·ªÉu ƒë·ªì
   * - Ph√¢n b·ªë d·ªØ li·ªáu theo 6 th√°ng g·∫ßn nh·∫•t
   * - Hi·ªÉn th·ªã tr·∫°ng th√°i chuy·∫øn bay th·ª±c t·∫ø
   */
  private updateChartsWithStatisticsData(): void {
    if (!this.statistics) {
      console.warn('‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu statistics');
      return;
    }

    console.log('üìä Creating charts with real statistics data...');

    // T·∫°o labels cho 6 th√°ng g·∫ßn nh·∫•t
    const now = new Date();
    const monthLabels = [];
    for (let i = 5; i >= 0; i--) {
      const date = new Date(now.getFullYear(), now.getMonth() - i, 1);
      monthLabels.push(date.toLocaleDateString('vi-VN', { month: 'long' }));
    }

    // C·∫≠p nh·∫≠t labels
    this.revenueChartData.labels = monthLabels;
    this.passengerChartData.labels = monthLabels;

    // Ph√¢n b·ªë doanh thu v√† h√†nh kh√°ch theo th√°ng (gi·∫£ s·ª≠ ph√¢n b·ªë ƒë·ªÅu)
    const monthlyRevenue = this.distributeValueByMonths(this.statistics.total_revenue, 6);
    const monthlyPassengers = this.distributeValueByMonths(this.statistics.total_passengers, 6);

    // C·∫≠p nh·∫≠t d·ªØ li·ªáu bi·ªÉu ƒë·ªì
    this.revenueChartData.datasets[0].data = monthlyRevenue;
    this.passengerChartData.datasets[0].data = monthlyPassengers;

    // C·∫≠p nh·∫≠t bi·ªÉu ƒë·ªì tr·∫°ng th√°i chuy·∫øn bay
    const delayedFlights = this.statistics.total_flights - this.statistics.on_time_flights - this.statistics.cancelled_flights;
    this.flightStatusChartData.datasets[0].data = [
      this.statistics.on_time_flights,
      Math.max(0, delayedFlights),
      this.statistics.cancelled_flights
    ];

    console.log('‚úÖ Charts updated with real statistics data');
    console.log('üìä Monthly revenue:', monthlyRevenue);
    console.log('üìä Monthly passengers:', monthlyPassengers);
    console.log('üìä Flight status:', [this.statistics.on_time_flights, Math.max(0, delayedFlights), this.statistics.cancelled_flights]);
    console.log('üìä Total revenue distributed:', monthlyRevenue.reduce((a, b) => a + b, 0));
    console.log('üìä Total passengers distributed:', monthlyPassengers.reduce((a, b) => a + b, 0));
  }

  /**
   * Ph√¢n b·ªë gi√° tr·ªã t·ªïng theo c√°c th√°ng v·ªõi xu h∆∞·ªõng tƒÉng tr∆∞·ªüng th·ª±c t·∫ø
   */
  private distributeValueByMonths(totalValue: number, months: number): number[] {
    const data: number[] = [];
    const baseValue = totalValue / months;
    
    // T·∫°o xu h∆∞·ªõng tƒÉng tr∆∞·ªüng (th√°ng g·∫ßn nh·∫•t c√≥ gi√° tr·ªã cao nh·∫•t)
    for (let i = 0; i < months; i++) {
      // Xu h∆∞·ªõng tƒÉng d·∫ßn t·ª´ th√°ng ƒë·∫ßu ƒë·∫øn th√°ng cu·ªëi
      const growthFactor = 0.7 + (i / (months - 1)) * 0.6; // 0.7 -> 1.3
      
      // Th√™m bi·∫øn ƒë·ªông ng·∫´u nhi√™n nh·ªè
      const randomVariation = 0.9 + Math.random() * 0.2; // 0.9 -> 1.1
      
      const monthlyValue = Math.round(baseValue * growthFactor * randomVariation);
      data.push(monthlyValue);
    }
    
    return data;
  }

  /**
   * C·∫≠p nh·∫≠t bi·ªÉu ƒë·ªì v·ªõi d·ªØ li·ªáu th·∫≠t t·ª´ flight instances
   * - Ph√¢n t√≠ch d·ªØ li·ªáu theo th√°ng (6 th√°ng g·∫ßn nh·∫•t)
   * - T√≠nh doanh thu d·ª±a tr√™n base_price v√† s·ªë gh·∫ø ƒë√£ b√°n
   * - ƒê·∫øm h√†nh kh√°ch theo t·ª´ng th√°ng
   * - Ph√¢n lo·∫°i tr·∫°ng th√°i chuy·∫øn bay (ƒë√∫ng gi·ªù/ch·∫≠m gi·ªù/b·ªã h·ªßy)
   */
  private updateChartDataWithRealData(): void {
    if (!this.flightInstances || this.flightInstances.length === 0) {
      console.warn('‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu flight instances, s·ª≠ d·ª•ng d·ªØ li·ªáu m·∫´u');
      this.updateChartData();
      return;
    }

    console.log('üìä Processing real flight data for charts...');

    // X·ª≠ l√Ω d·ªØ li·ªáu theo th√°ng (6 th√°ng g·∫ßn nh·∫•t)
    const monthlyData = this.processMonthlyData();
    
    // C·∫≠p nh·∫≠t bi·ªÉu ƒë·ªì doanh thu
    this.revenueChartData.datasets[0].data = monthlyData.revenue;
    
    // C·∫≠p nh·∫≠t bi·ªÉu ƒë·ªì h√†nh kh√°ch
    this.passengerChartData.datasets[0].data = monthlyData.passengers;

    // C·∫≠p nh·∫≠t bi·ªÉu ƒë·ªì tr·∫°ng th√°i chuy·∫øn bay
    const statusData = this.processFlightStatusData();
    this.flightStatusChartData.datasets[0].data = statusData;

    console.log('‚úÖ Charts updated with real data');
  }

  private processMonthlyData(): { revenue: number[], passengers: number[] } {
    const now = new Date();
    const months = [];
    
    // T·∫°o danh s√°ch 6 th√°ng g·∫ßn nh·∫•t
    for (let i = 5; i >= 0; i--) {
      const date = new Date(now.getFullYear(), now.getMonth() - i, 1);
      months.push({
        year: date.getFullYear(),
        month: date.getMonth(),
        label: date.toLocaleDateString('vi-VN', { month: 'long' })
      });
    }

    // C·∫≠p nh·∫≠t labels cho bi·ªÉu ƒë·ªì
    this.revenueChartData.labels = months.map(m => m.label);
    this.passengerChartData.labels = months.map(m => m.label);

    const revenueData: number[] = [];
    const passengerData: number[] = [];

    months.forEach(month => {
      // L·ªçc flights trong th√°ng n√†y
      const flightsInMonth = this.flightInstances.filter(flight => {
        const flightDate = new Date(flight.scheduled_departure_local || flight.departure_date);
        return flightDate.getFullYear() === month.year && 
               flightDate.getMonth() === month.month;
      });

      // T√≠nh doanh thu (gi·∫£ s·ª≠ m·ªói flight c√≥ base_price v√† s·ªë gh·∫ø ƒë√£ b√°n)
      let monthlyRevenue = 0;
      let monthlyPassengers = 0;

      flightsInMonth.forEach(flight => {
        // ∆Ø·ªõc t√≠nh doanh thu d·ª±a tr√™n base_price v√† s·ªë gh·∫ø
        const basePrice = flight.fares?.[0]?.base_price || flight.base_price || 0;
        const totalSeats = flight.total_seats || flight.available_seats || 0;
        const soldSeats = totalSeats - (flight.available_seats || 0);
        
        monthlyRevenue += basePrice * soldSeats;
        monthlyPassengers += soldSeats;
      });

      revenueData.push(monthlyRevenue);
      passengerData.push(monthlyPassengers);
    });

    return { revenue: revenueData, passengers: passengerData };
  }

  private processFlightStatusData(): number[] {
    let onTime = 0;
    let delayed = 0;
    let cancelled = 0;

    this.flightInstances.forEach(flight => {
      const status = flight.status?.toLowerCase() || 'scheduled';
      
      switch (status) {
        case 'completed':
        case 'on-time':
        case 'scheduled':
          onTime++;
          break;
        case 'delayed':
        case 'late':
          delayed++;
          break;
        case 'cancelled':
        case 'canceled':
          cancelled++;
          break;
        default:
          onTime++; // M·∫∑c ƒë·ªãnh coi l√† ƒë√∫ng gi·ªù
      }
    });

    return [onTime, delayed, cancelled];
  }

  private updateChartData(): void {
    if (!this.statistics) return;

    // C·∫≠p nh·∫≠t bi·ªÉu ƒë·ªì tr·∫°ng th√°i chuy·∫øn bay
    const delayedFlights = this.statistics.total_flights - this.statistics.on_time_flights - this.statistics.cancelled_flights;
    this.flightStatusChartData.datasets[0].data = [
      this.statistics.on_time_flights,
      Math.max(0, delayedFlights),
      this.statistics.cancelled_flights
    ];

    // T·∫°o labels cho 6 th√°ng g·∫ßn nh·∫•t
    const now = new Date();
    const monthLabels = [];
    for (let i = 5; i >= 0; i--) {
      const date = new Date(now.getFullYear(), now.getMonth() - i, 1);
      monthLabels.push(date.toLocaleDateString('vi-VN', { month: 'long' }));
    }

    // C·∫≠p nh·∫≠t labels
    this.revenueChartData.labels = monthLabels;
    this.passengerChartData.labels = monthLabels;

    // T·∫°o d·ªØ li·ªáu m·∫´u cho bi·ªÉu ƒë·ªì doanh thu v√† h√†nh kh√°ch (6 th√°ng g·∫ßn nh·∫•t)
    const monthlyRevenue = this.generateMonthlyData(this.statistics.total_revenue, 6);
    const monthlyPassengers = this.generateMonthlyData(this.statistics.total_passengers, 6);

    this.revenueChartData.datasets[0].data = monthlyRevenue;
    this.passengerChartData.datasets[0].data = monthlyPassengers;
  }

  private generateMonthlyData(totalValue: number, months: number): number[] {
    // T·∫°o d·ªØ li·ªáu m·∫´u v·ªõi xu h∆∞·ªõng tƒÉng tr∆∞·ªüng
    const data: number[] = [];
    const baseValue = totalValue / months;
    
    for (let i = 0; i < months; i++) {
      // Th√™m m·ªôt ch√∫t bi·∫øn ƒë·ªông ng·∫´u nhi√™n
      const variation = 0.8 + Math.random() * 0.4; // 80% - 120% c·ªßa gi√° tr·ªã c∆° b·∫£n
      data.push(Math.round(baseValue * variation));
    }
    
    return data;
  }

  private checkLoadingComplete(): void {
    // T·∫Øt loading state khi ƒë√£ c√≥ d·ªØ li·ªáu statistics
    if (this.statistics && this.statistics.total_flights >= 0) {
      this.isLoading = false;
    }
  }
}
